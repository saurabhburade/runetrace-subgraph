// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { RunestoneBuf } from "./RunestoneBuf";
import { Transaction } from "./Transaction";

export class Block {
  static encode(message: Block, writer: Writer): void {
    const runestones = message.runestones;
    for (let i: i32 = 0; i < runestones.length; ++i) {
      writer.uint32(10);
      writer.fork();
      RunestoneBuf.encode(runestones[i], writer);
      writer.ldelim();
    }

    writer.uint32(72);
    writer.uint64(message.timestamp);

    writer.uint32(16);
    writer.uint64(message.number);

    writer.uint32(24);
    writer.uint64(message.minerReward);

    writer.uint32(32);
    writer.uint64(message.subsidy);

    writer.uint32(40);
    writer.uint64(message.fees);

    const txs = message.txs;
    for (let i: i32 = 0; i < txs.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Transaction.encode(txs[i], writer);
      writer.ldelim();
    }

    writer.uint32(58);
    writer.string(message.minerAddress);

    writer.uint32(64);
    writer.uint64(message.totalRunesTx);
  }

  static decode(reader: Reader, length: i32): Block {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Block();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.runestones.push(RunestoneBuf.decode(reader, reader.uint32()));
          break;

        case 9:
          message.timestamp = reader.uint64();
          break;

        case 2:
          message.number = reader.uint64();
          break;

        case 3:
          message.minerReward = reader.uint64();
          break;

        case 4:
          message.subsidy = reader.uint64();
          break;

        case 5:
          message.fees = reader.uint64();
          break;

        case 6:
          message.txs.push(Transaction.decode(reader, reader.uint32()));
          break;

        case 7:
          message.minerAddress = reader.string();
          break;

        case 8:
          message.totalRunesTx = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  runestones: Array<RunestoneBuf>;
  timestamp: u64;
  number: u64;
  minerReward: u64;
  subsidy: u64;
  fees: u64;
  txs: Array<Transaction>;
  minerAddress: string;
  totalRunesTx: u64;

  constructor(
    runestones: Array<RunestoneBuf> = [],
    timestamp: u64 = 0,
    number: u64 = 0,
    minerReward: u64 = 0,
    subsidy: u64 = 0,
    fees: u64 = 0,
    txs: Array<Transaction> = [],
    minerAddress: string = "",
    totalRunesTx: u64 = 0
  ) {
    this.runestones = runestones;
    this.timestamp = timestamp;
    this.number = number;
    this.minerReward = minerReward;
    this.subsidy = subsidy;
    this.fees = fees;
    this.txs = txs;
    this.minerAddress = minerAddress;
    this.totalRunesTx = totalRunesTx;
  }
}

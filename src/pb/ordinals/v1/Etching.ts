// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Terms } from "./Terms";
import { RuneId } from "./RuneId";

export class Etching {
  static encode(message: Etching, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.divisibility);

    writer.uint32(18);
    writer.string(message.premine);

    writer.uint32(26);
    writer.string(message.rune);

    writer.uint32(34);
    writer.string(message.spacers);

    writer.uint32(42);
    writer.string(message.symbol);

    writer.uint32(48);
    writer.bool(message.turbo);

    writer.uint32(58);
    writer.string(message.supply);

    const terms = message.terms;
    if (terms !== null) {
      writer.uint32(66);
      writer.fork();
      Terms.encode(terms, writer);
      writer.ldelim();
    }

    const id = message.id;
    if (id !== null) {
      writer.uint32(74);
      writer.fork();
      RuneId.encode(id, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Etching {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Etching();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.divisibility = reader.int32();
          break;

        case 2:
          message.premine = reader.string();
          break;

        case 3:
          message.rune = reader.string();
          break;

        case 4:
          message.spacers = reader.string();
          break;

        case 5:
          message.symbol = reader.string();
          break;

        case 6:
          message.turbo = reader.bool();
          break;

        case 7:
          message.supply = reader.string();
          break;

        case 8:
          message.terms = Terms.decode(reader, reader.uint32());
          break;

        case 9:
          message.id = RuneId.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  divisibility: i32;
  premine: string;
  rune: string;
  spacers: string;
  symbol: string;
  turbo: bool;
  supply: string;
  terms: Terms | null;
  id: RuneId | null;

  constructor(
    divisibility: i32 = 0,
    premine: string = "",
    rune: string = "",
    spacers: string = "",
    symbol: string = "",
    turbo: bool = false,
    supply: string = "",
    terms: Terms | null = null,
    id: RuneId | null = null
  ) {
    this.divisibility = divisibility;
    this.premine = premine;
    this.rune = rune;
    this.spacers = spacers;
    this.symbol = symbol;
    this.turbo = turbo;
    this.supply = supply;
    this.terms = terms;
    this.id = id;
  }
}

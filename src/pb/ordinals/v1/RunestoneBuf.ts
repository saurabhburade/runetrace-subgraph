// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.26.1

import { Writer, Reader } from "as-proto/assembly";
import { Edict } from "./Edict";
import { Etching } from "./Etching";
import { RuneId } from "./RuneId";

export class RunestoneBuf {
  static encode(message: RunestoneBuf, writer: Writer): void {
    const edicts = message.edicts;
    for (let i: i32 = 0; i < edicts.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Edict.encode(edicts[i], writer);
      writer.ldelim();
    }

    const etching = message.etching;
    if (etching !== null) {
      writer.uint32(18);
      writer.fork();
      Etching.encode(etching, writer);
      writer.ldelim();
    }

    const mint = message.mint;
    if (mint !== null) {
      writer.uint32(26);
      writer.fork();
      RuneId.encode(mint, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.pointer);
  }

  static decode(reader: Reader, length: i32): RunestoneBuf {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RunestoneBuf();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.edicts.push(Edict.decode(reader, reader.uint32()));
          break;

        case 2:
          message.etching = Etching.decode(reader, reader.uint32());
          break;

        case 3:
          message.mint = RuneId.decode(reader, reader.uint32());
          break;

        case 4:
          message.pointer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  edicts: Array<Edict>;
  etching: Etching | null;
  mint: RuneId | null;
  pointer: string;

  constructor(
    edicts: Array<Edict> = [],
    etching: Etching | null = null,
    mint: RuneId | null = null,
    pointer: string = ""
  ) {
    this.edicts = edicts;
    this.etching = etching;
    this.mint = mint;
    this.pointer = pointer;
  }
}
